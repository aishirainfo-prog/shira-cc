// /app/api/schedine/genera/route.ts
import { NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export async function POST() {
  try {
    // prendi le prossime partite di oggi
    const { data: fixtures, error } = await supabase
      .from('fixtures')
      .select('*')
      .gt('start_ts', new Date().toISOString())
      .order('start_ts', { ascending: true })
      .limit(10)

    if (error) throw error
    if (!fixtures || fixtures.length === 0) {
      return NextResponse.json({ error: 'Nessuna partita futura trovata oggi' }, { status: 404 })
    }

    // DEMO: prendi le prime 3 e scegli "1"
    const picks = fixtures.slice(0, 3).map(f => ({
      fixture_id: f.id,
      pick: '1',
      price: null,  // finché non colleghiamo le quote
      prob: 0.45,   // ipotesi demo
      value: null
    }))

    const { data: schedinaRow, error: e1 } = await supabase
      .from('schedine')
      .insert({ stake: 10, note: 'DEMO v0 – 3 partite oggi, pick 1' })
      .select()
      .single()
    if (e1) throw e1

    const rows = picks.map(p => ({ schedina_id: schedinaRow.id, ...p }))
    const { error: e2 } = await supabase.from('schedina_voci').insert(rows)
    if (e2) throw e2

    return NextResponse.json({
      ok: true,
      algo_version: 'demo-0',
      schedina_id: schedinaRow.id,
      voci: rows.length
    })
  } catch (e: any) {
    return NextResponse.json({ error: e.message || String(e) }, { status: 500 })
  }
}
