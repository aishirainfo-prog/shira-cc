import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
export const runtime = 'nodejs';

async function generate(nParam: number) {
  const n = Math.min(10, Math.max(1, Number(nParam) || 5));

  const { data: fixtures, error } = await supabase
    .from('fixtures')
    .select('*')
    .gte('start_ts', new Date().toISOString())
    .order('start_ts', { ascending: true })
    .limit(50);

  if (error) return NextResponse.json({ error: error.message }, { status: 500 });
  if (!fixtures?.length) {
    return NextResponse.json({ error: 'Nessuna partita in DB. Esegui /api/sync/fixtures o inserisci dati.' }, { status: 400 });
  }

  const picks = fixtures.slice(0, n).map((f:any) => ({
    fixture_id: f.id,
    match: `${f.home} vs ${f.away}`,
    pick: '1',      // regola demo: vittoria casa
    prob: 0.45,     // demo
    value: null,
    price: null
  }));

  const { data: schedinaRow, error: e1 } = await supabase
    .from('schedine').insert({ stake: 1, note: 'demo v0.1' })
    .select('id').single();
  if (e1) return NextResponse.json({ error: e1.message }, { status: 500 });

  const rows = picks.map(p => ({
    schedina_id: schedinaRow.id,
    fixture_id: p.fixture_id,
    pick: p.pick,
    prob: p.prob,
    value: p.value,
    price: p.price
  }));
  const { error: e2 } = await supabase.from('schedina_voci').insert(rows);
  if (e2) return NextResponse.json({ error: e2.message }, { status: 500 });

  return NextResponse.json({
    ok: true,
    schedina_id: schedinaRow.id,
    algo_version: 'demo-0.1',
    fonte: 'fixtures in DB',
    picks
  });
}

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const n = searchParams.get('n') || '5';
  return generate(Number(n));
}

export async function POST(req: Request) {
  const body = await req.json().catch(()=>({ n: 5 }));
  return generate(body.n);
}
