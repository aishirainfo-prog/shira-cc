import { NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import crypto from 'crypto'

function todayRangeUTC() {
  const d = new Date()
  const y = d.getUTCFullYear()
  const m = String(d.getUTCMonth() + 1).padStart(2, '0')
  const day = String(d.getUTCDate()).padStart(2, '0')
  const from = `${y}-${m}-${day}`
  const to = `${y}-${m}-${day}`
  return { from, to }
}

export const runtime = 'nodejs' // per usare crypto

export async function GET() {
  try {
    const { from, to } = todayRangeUTC()
    const token = process.env.FOOTBALL_DATA_TOKEN
    if (!token) return NextResponse.json({ error: 'FOOTBALL_DATA_TOKEN mancante' }, { status: 400 })

    const url = `https://api.football-data.org/v4/matches?dateFrom=${from}&dateTo=${to}`
    const res = await fetch(url, { headers: { 'X-Auth-Token': token } })
    const json = await res.json()

    // log della fonte (prova reale)
    const payload = JSON.stringify(json)
    const hash = crypto.createHash('sha256').update(payload).digest('hex')
    await supabase.from('sources_log').insert({
      source: 'football-data.org',
      url,
      payload: json,
      payload_hash: hash,
    })

    if (!json.matches) {
      return NextResponse.json({ ok: true, saved: 0, note: 'Nessun match oggi (fonte)' })
    }

    // salva/aggiorna fixtures
    const rows = json.matches.map((m: any) => ({
      id: m.id,                     // id della fonte
      sport: 'football',
      league: m.competition?.name || null,
      home: m.homeTeam?.name || null,
      away: m.awayTeam?.name || null,
      start_ts: m.utcDate ? new Date(m.utcDate).toISOString() : null,
      status: m.status || null,
    }))

    // upsert a blocchi per evitare limite
    const chunk = 500
    for (let i = 0; i < rows.length; i += chunk) {
      const part = rows.slice(i, i + chunk)
      const { error } = await supabase.from('fixtures').upsert(part, { onConflict: 'id' })
      if (error) throw error
    }

    return NextResponse.json({ ok: true, saved: rows.length, from, to })
  } catch (e: any) {
    return NextResponse.json({ error: e.message || String(e) }, { status: 500 })
  }
}
