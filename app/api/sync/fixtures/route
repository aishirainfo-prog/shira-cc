import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { fetchTodayMatches } from '@/lib/providers/footballData';
import crypto from 'crypto';
export const runtime = 'nodejs';

export async function GET() {
  try {
    const { url: sourceUrl, data } = await fetchTodayMatches();
    const matches = data.matches || [];

    // Log di provenienza con hash del payload
    const payloadHash = crypto
      .createHash('sha256')
      .update(JSON.stringify(data))
      .digest('hex');

    await supabase.from('sources_log').insert({
      source: 'football-data',
      url: sourceUrl,
      payload: data,
      payload_hash: payloadHash
    });

    // Upsert in fixtures
    const rows = matches.map((m: any) => ({
      id: m.id,
      sport: 'football',
      league: m.competition?.name ?? null,
      home: m.homeTeam?.name ?? null,
      away: m.awayTeam?.name ?? null,
      start_ts: m.utcDate ?? null,
      status: m.status ?? null
    }));

    const { error } = await supabase
      .from('fixtures')
      .upsert(rows, { onConflict: 'id' });

    if (error) throw error;

    return NextResponse.json({
      ok: true,
      count: rows.length,
      source: { provider: 'football-data', url: sourceUrl, hash: payloadHash }
    });
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: e.message }, { status: 500 });
  }
}
