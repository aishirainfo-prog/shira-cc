// /app/api/sync/fixtures/route.ts
import { NextResponse } from 'next/server'
import { supabaseAdmin } from '@/lib/supabaseAdmin'
import crypto from 'crypto'

export const runtime = 'nodejs' // ci serve crypto

function day(d = new Date()) {
  return d.toISOString().slice(0, 10) // YYYY-MM-DD
}

export async function GET() {
  const token = process.env.FOOTBALL_DATA_API_KEY
  if (!token) return NextResponse.json({ error: 'FOOTBALL_DATA_API_KEY mancante' }, { status: 400 })

  const dateFrom = day()
  const dt = new Date()
  dt.setDate(dt.getDate() + 1)
  const dateTo = day(dt)

  // API ufficiale football-data.org
  const url = `https://api.football-data.org/v4/matches?dateFrom=${dateFrom}&dateTo=${dateTo}`
  const res = await fetch(url, { headers: { 'X-Auth-Token': token } })
  const json = await res.json()

  if (!res.ok) {
    return NextResponse.json({ error: json?.message || 'Errore fonte' }, { status: res.status })
  }

  const matches = json?.matches ?? []
  let upFixtures = 0, upResults = 0

  for (const m of matches) {
    const id = m.id as number
    const league = m.competition?.name ?? null
    const home = m.homeTeam?.shortName || m.homeTeam?.name
    const away = m.awayTeam?.shortName || m.awayTeam?.name
    const start_ts = m.utcDate ? new Date(m.utcDate) : null
    const status = m.status ?? null

    // fixtures
    const { error: e1 } = await supabaseAdmin
      .from('fixtures')
      .upsert([{ id, sport: 'football', league, home, away, start_ts, status }], { onConflict: 'id' })
    if (!e1) upFixtures++

    // results
    const ft = m.score?.fullTime || {}
    const final = status === 'FINISHED'
    const { error: e2 } = await supabaseAdmin
      .from('results')
      .upsert([{ fixture_id: id, home_score: ft.home ?? null, away_score: ft.away ?? null, final }], { onConflict: 'fixture_id' })
    if (!e2) upResults++
  }

  // Log di provenienza (verificabile)
  const payload_hash = crypto.createHash('sha256').update(JSON.stringify(matches)).digest('hex')
  await supabaseAdmin.from('sources_log').insert([{
    source: 'football-data.org',
    url,
    payload: matches,
    payload_hash
  }])

  return NextResponse.json({
    source: 'football-data.org',
    dateFrom, dateTo,
    fixtures_upserted: upFixtures,
    results_upserted: upResults,
    count: matches.length
  })
}
